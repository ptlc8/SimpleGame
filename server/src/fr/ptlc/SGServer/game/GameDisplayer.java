package fr.ptlc.SGServer.game;

import java.awt.Color;
import java.awt.Font;
import java.util.HashSet;
import java.util.Set;

import javax.swing.JFrame;
import javax.swing.JTextArea;

import com.google.gson.Gson;

import fr.ptlc.SGServer.entities.Entity;
import fr.ptlc.SGServer.entities.Playable;

public class GameDisplayer {
	
	private final JFrame frame;
	
	private final JTextArea display;
	
	public GameDisplayer(String name, short[][] pattern) {
		frame = new JFrame(name);
		//frame.setSize((int)(pattern[0].length*12.5), pattern.length*15);
		frame.add(display = new JTextArea());
		display.setEnabled(false);
		display.setDisabledTextColor(Color.BLACK);
		display.setFont(new Font(Font.MONOSPACED, Font.PLAIN, 10));
		refresh(pattern, new HashSet<Entity>());
		frame.pack();
		frame.setVisible(true);
	}
	
	public static void main(String[] args) {
		new GameDisplayer("TEST", new Gson().fromJson("[[2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2],[2,2,2,2,2,2,2,2,2,2,2,2,2,0,0,0,0,0,0,2,2,2,2,2,2,2,2,2,2,2,2,2],[2,2,2,2,2,2,2,2,2,2,2,2,2,0,0,0,0,0,0,2,2,2,2,2,2,2,2,2,2,2,2,2],[2,2,2,2,2,2,2,2,2,2,2,2,2,0,0,0,1,0,0,2,2,2,2,2,2,2,2,2,2,2,2,2],[2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2],[2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2],[2,0,0,2,2,2,0,0,2,2,2,2,2,0,0,0,0,0,0,2,2,0,0,2,2,2,2,2,2,0,0,2],[2,0,0,2,2,2,0,0,2,2,2,2,2,2,2,0,0,2,2,2,2,0,0,2,2,2,2,2,2,0,0,2],[2,0,0,2,2,2,0,0,2,2,2,2,2,2,2,0,0,2,2,0,0,0,0,0,0,0,0,0,0,0,0,2],[2,0,0,0,0,0,0,0,0,0,0,0,2,2,2,0,0,2,2,0,0,0,0,0,0,0,0,0,0,0,0,2],[2,0,0,0,0,0,0,0,0,0,0,0,2,2,2,0,0,2,2,0,0,0,0,0,0,0,0,0,0,0,0,2],[2,0,0,2,2,2,0,0,2,2,0,0,2,2,2,0,0,2,2,0,0,0,0,0,0,0,0,0,0,0,0,2],[2,0,0,2,2,2,2,2,2,2,0,0,0,0,0,0,0,2,2,0,0,0,0,0,0,0,0,0,0,0,0,2],[2,0,0,2,2,2,2,2,2,2,0,0,0,0,0,0,0,2,2,0,0,0,0,0,0,0,0,0,0,0,0,2],[2,0,0,2,2,2,0,0,2,2,0,0,2,2,2,0,0,2,2,0,0,0,0,0,0,0,0,0,0,0,0,2],[2,0,0,0,0,0,0,0,0,0,0,0,2,2,2,0,0,2,2,0,0,0,0,0,0,0,0,0,0,0,0,2],[2,0,0,0,0,0,0,0,0,0,0,0,2,2,2,0,0,2,2,2,2,2,2,0,0,2,2,2,2,2,2,2],[2,0,0,2,2,2,0,0,2,2,2,2,2,2,2,0,0,2,2,2,2,2,2,0,0,2,2,2,2,2,2,2],[2,0,0,2,2,2,0,0,2,2,2,2,2,2,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2],[2,0,0,0,0,0,0,0,2,2,2,2,2,2,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2],[2,0,0,0,0,0,0,0,0,0,0,0,2,2,2,2,0,0,0,2,2,2,2,2,2,2,2,2,0,0,0,2],[2,2,2,2,0,0,0,0,0,0,0,0,2,2,2,2,0,0,0,2,2,2,2,2,2,2,2,2,0,0,0,2],[2,2,2,2,0,0,0,0,2,2,0,0,2,2,2,0,0,0,0,0,0,0,0,0,0,0,2,2,0,0,0,2],[2,0,0,0,0,0,0,0,2,2,0,0,2,2,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2],[2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,2,2,0,0,2,2,0,0,0,0,0,0,0,2],[2,0,0,0,2,2,0,0,0,0,0,0,0,0,0,0,0,2,2,2,0,0,2,2,0,0,0,0,2,2,2,2],[2,0,0,0,2,2,2,2,2,2,2,2,2,0,0,0,2,2,2,2,0,0,0,0,0,0,0,0,2,2,2,2],[2,0,0,0,2,2,2,2,2,2,2,2,2,0,0,0,2,2,2,2,0,0,0,0,0,0,0,0,0,0,0,2],[2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,2,2,2,2,2,2,0,0,0,0,0,0,0,2],[2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,2,2,2,2,2,2,0,0,2,2,2,0,0,2],[2,2,2,2,2,2,2,0,0,2,2,2,2,2,2,0,0,2,2,2,2,2,2,2,0,0,2,2,2,0,0,2],[2,2,2,2,2,2,2,0,0,2,2,2,2,2,2,0,0,2,2,2,0,0,0,0,0,0,0,0,0,0,0,2],[2,0,0,0,0,0,0,0,0,0,0,0,0,2,2,0,0,2,2,2,0,0,0,0,0,0,0,0,0,0,0,2],[2,0,0,0,0,0,0,0,0,0,0,0,0,2,2,0,0,2,2,2,0,0,2,2,0,0,2,2,2,0,0,2],[2,0,0,0,0,0,0,0,0,0,0,0,0,2,2,0,0,0,0,0,0,0,2,2,2,2,2,2,2,0,0,2],[2,0,0,0,0,0,0,0,0,0,0,0,0,2,2,0,0,0,0,0,0,0,2,2,2,2,2,2,2,0,0,2],[2,0,0,0,0,0,0,0,0,0,0,0,0,2,2,0,0,2,2,2,0,0,2,2,0,0,2,2,2,0,0,2],[2,0,0,0,0,0,0,0,0,0,0,0,0,2,2,0,0,2,2,2,0,0,0,0,0,0,0,0,0,0,0,2],[2,0,0,0,0,0,0,0,0,0,0,0,0,2,2,0,0,2,2,2,0,0,0,0,0,0,0,0,0,0,0,2],[2,0,0,0,0,0,0,0,0,0,0,0,0,2,2,0,0,2,2,2,2,2,2,2,0,0,2,2,2,0,0,2],[2,0,0,2,2,2,2,2,2,0,0,2,2,2,2,0,0,2,2,2,2,2,2,2,0,0,2,2,2,0,0,2],[2,0,0,2,2,2,2,2,2,0,0,2,2,0,0,0,0,0,0,2,2,2,2,2,0,0,2,2,2,0,0,2],[2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2],[2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2],[2,2,2,2,2,2,2,2,2,2,2,2,2,0,0,0,0,0,0,2,2,2,2,2,2,2,2,2,2,2,2,2],[2,2,2,2,2,2,2,2,2,2,2,2,2,0,0,0,0,0,0,2,2,2,2,2,2,2,2,2,2,2,2,2],[2,2,2,2,2,2,2,2,2,2,2,2,2,0,0,0,0,0,0,2,2,2,2,2,2,2,2,2,2,2,2,2],[2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2]]", short[][].class));
	}
	
	public void refresh(short[][] pattern, Set<Entity> entities) {
		byte[][] affE = new byte[pattern.length][pattern.length==0?0:pattern[0].length];
		synchronized (entities) {
			for (Entity entity : entities) {
				int xP = entity.getIntX()/64, yP = entity.getIntY()/64;
				if (0 <= yP && yP+1 < pattern.length && 0 <= xP && xP+1 < pattern[0].length)
					if (affE[yP][xP] != 1)
						if (entity instanceof Playable)
							affE[yP][xP] = 1;
						else
							affE[yP][xP] += 2;
			}
		}
		StringBuilder aff = new StringBuilder();
		for (int i = 0; i < pattern.length; i++) {
			for (int j = 0; j < pattern[i].length; j++)
				aff.append((affE[i][j]==0 ? (
						pattern[i][j]==1 ? "@" :
						pattern[i][j]>1 ? "#" :
							" "
					) : (
						affE[i][j]==1 ? "O" :
						affE[i][j]==2 ? "-" :
						affE[i][j]==4 ? "=" :	
						"Â±"
					)) + " ");
			aff.append("\n");
		}
		display.setText(aff.substring(0, aff.length()-1));
	}
	
	public void close() {
		frame.setVisible(false);
	}
	
}
